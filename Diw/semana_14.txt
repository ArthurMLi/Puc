semana 14
Apresenta√ß√£o din√¢mica de dados
A partir dos dados cadastrados na etapa anterior, vamos trabalhar formas de apresenta√ß√£o que representem de forma clara e interativa as informa√ß√µes do seu projeto. Voc√™ poder√° usar gr√°ficos (barra, linha, pizza), mapas, calend√°rios ou outras formas de visualiza√ß√£o. Seu desafio √© entregar uma p√°gina Web que organize, processe e exiba os dados de forma compreens√≠vel e esteticamente agrad√°vel.

Com base nos tipos de projetos escohidos, podemos propor visualiza√ß√µes que estimulem a interpreta√ß√£o, agrupamento e exibi√ß√£o criativa dos dados, trabalhando tanto a l√≥gica quanto o design das nossas aplica√ß√µes.

Abaixo, s√£o apresentadas sugest√µes de visualiza√ß√µes espec√≠ficas para cada tipo de projeto, com ideias que podem ser realizadas com ferramentas acess√≠veis como FullCalendarLinks to an external site., Chart.jsLinks to an external site., MapboxLinks to an external site., para citar algumas.

üì∞ Not√≠cias
Gr√°fico de barras com n√∫mero de not√≠cias por categoria: Ex: pol√≠tica, economia, cultura, esportes.  [Chart,js]
Calend√°rio com not√≠cias por dia de publica√ß√£o: Visualiza√ß√£o das not√≠cias do dia, tanto por m√™s como por lista. [FullCalendar]
Mapa com local de origem das not√≠cias (se houver localidade): Not√≠cias por cidade ou pa√≠s. [Mapbox]
üé¨ Filmes
Gr√°fico de pizza por g√™nero: Distribui√ß√£o de filmes por g√™nero (a√ß√£o, com√©dia, drama‚Ä¶). [Chart,js]
Gr√°fico de barras com avalia√ß√£o m√©dia por ano ou por g√™nero: √ötil se tiverem campos como nota e ano de lan√ßamento. [Chart,js]
Mapa com os locais dos filmes: Informando onde foram filmados ou o pa√≠s de origem da produ√ß√£o. [Mapbox]
üçΩÔ∏è Receitas
Gr√°fico de pizza mostrando o percentual de receitas por categoria culin√°ria: Ex: doces, salgados, bebidas, massas.  [Chart,js]
Gr√°fico de barras por tempo de preparo: Agrupar receitas por tempo (ex: at√© 30min, 1h‚Ä¶).  [Chart,js]
Mapa  das receitas: Informa√ß√£o da localiza√ß√£o t√≠pica ou origem da receita. [Mapbox]
üèûÔ∏è Lugares Tur√≠sticos
Mapa interativo com marcadores dos locais: Usar Mapbox. [Mapbox]
Gr√°fico de barras com atra√ß√µes por cidade ou pa√≠s: Quantidade de pontos tur√≠sticos por regi√£o. [Chart,js]
Gr√°fico de avalia√ß√£o m√©dia por lugar: Visualizar os locais mais bem avaliados. [Chart,js]
üìÖ Eventos
Calend√°rio interativo com datas dos eventos: Visualiza√ß√£o dos eventos em um calend√°rio. [FullCalendar]
Gr√°fico de eventos por tipo (show, palestra, workshop‚Ä¶): Gr√°fico de pizza ou barras.   [Chart,js]
Mapa com localiza√ß√£o dos eventos: Especialmente √∫til se os eventos forem em diferentes cidades. [Mapbox]
 

‚ö†Ô∏è  Escolha uma entre as sugest√µes e monte uma apresenta√ß√£o din√¢mica para os seus dados. As apresenta√ß√µes devem utilizar uma das op√ß√µes de bibliotecas apresentadas na disciplina ou algo similar.

 

Habilidades a serem trabalhadas
Implementa√ß√£o de funcionalidades a partir de bibliotecas externas
Manipula√ß√£o de dados em estruturas JSON
Manipula√ß√£o de eventos para montagem din√¢mica de p√°ginas
 

Conhecimento Envolvido
Mapas e Mapbox
Web API - Geolocation
Biblioteca e API Mapbox
Gr√°ficos com Chart.js
Gr√°ficos com Chart.js
Gr√°ficos de Pizza com Chart.js e dados em JSON
Gr√°ficos de Barras empilhadas com Chart.js e dados em JSON
Calend√°rios com FullCalendar
Calend√°rios com JSON e FullCalendar.js
 

Tarefas a serem realizadas
Vamos seguir um processo gradativo de desenvolvimento com registro do passo a passo via commits e tags no reposit√≥rio git e GitHub.

Etapa 1 - Ambiente da etapa anterior

Inicialmente, aceite a tarefa no GitHub Classroom (link fornecido pelo professor)
Fa√ßa o clone do reposit√≥rio em seu computador local
Traga os arquivos do seu projeto anterior.
‚ö†Ô∏è Fa√ßa um commit que informe na mensagem sobre a montagem do ambiente de desenvolvimento inicial.
‚úÖ Utilize o recurso de tags do git para marcar essa vers√£o como a "v1.0" (git tag -a v1.0 -m "chore: ambiente de desenvolvimento inicial do projeto") 
 

Etapa 2 - Implementa√ß√£o de apresenta√ß√£o din√¢mica

Inclua uma p√°gina para a apresenta√ß√£o e fa√ßa a refer√™ncia para a biblioteca a ser trabalhada (Mapbox, FullCalendar ou Chart.js). 
Realize a implementa√ß√£o da apresenta√ß√£o din√¢mica na nova p√°gina.
Execute os testes e tire pelo menos dois PRINT da funcionalidade com dados diferentes manipulados por meio da funcionalidade de CRUD da etapa anterior.
Inclua os prints no arquivo README.md que est√° na raiz do reposit√≥rio.
‚ö†Ô∏è Fa√ßa um commit que informe na mensagem a implementa√ß√£o da funcionalidade din√¢mica.
‚úÖ Utilize o recurso de tags do git para marcar essa vers√£o como a "v2.0" (git tag -a v2.0 -m "feat: add funcionalidade [FUNCIONALIDADE]")
 

Etapa 3 - Documenta√ß√£o do projeto

Edite o arquivo README.md, coloque seus dados, os dados da funcionalidade com uma breve descri√ß√£o e verifique se est√£o todos os prints solicitados para a documenta√ß√£o completa da entrega. 
‚ö†Ô∏è Fa√ßa um commit que informe o fechamento do trabalho e altera√ß√£o da documenta√ß√£o
‚úÖ Utilize o recurso de tags do git para marcar essa vers√£o como a "v3.0" (git tag -a v3.0 -m "docs: Altera√ß√µes do README.md") 
 

Para visualizar o resultado, submeta as altera√ß√µes do reposit√≥rio para o servidor do GitHub: git push origin main --tags

Em seguida, submeta aqui nessa tarefa do Canvas a URL do seu reposit√≥rio no GitHub

 

Ferramentas empregadas
Node.js (plataforma de execu√ß√£o JavaScript no servidor)
JSON Server (servidor fake REST API)
Bibliotecas Mapbox, FullCalendar e Chart.js
Visual Studio Code (ou outro editor)
Git/GitHub (controle de vers√£o)
GitHub Classroom (gerenciamento do reposit√≥rio)